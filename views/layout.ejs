<!doctype html>  
<html lang="en">
	
	<head>
		<meta charset="utf-8">
		
		<title>Remote Presentation</title>

		<meta name="description" content="An easy to use CSS 3D slideshow tool for quickly creating good looking HTML presentations.">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		
		<link href='http://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
		
		<link rel="stylesheet" href="/css/reveal.min.css">
		<link rel="stylesheet" href="/css/theme/default.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="/lib/css/zenburn.css">

		<!-- If the query includes 'print-pdf', include the PDF print sheet -->
		<script>
			if( window.location.search.match( /print-pdf/gi ) ) {
				var link = document.createElement( 'link' );
				link.rel = 'stylesheet';
				link.type = 'text/css';
				link.href = '/css/print/pdf.css';
				document.getElementsByTagName( 'head' )[0].appendChild( link );
			}
		</script>

	</head>
	
	<body>
	
		<%- body %>
	
<!-- Optional libraries for code syntax highlighting and classList support in IE9 

<script src="http://cdnjs.cloudflare.com/ajax/libs/headjs/1.0.3/head.core.min.js"></script>

-->
<script src="/lib/js/head.min.js"></script>

<script>	
	// Load third party scripts
	head.js( '/lib/js/classList.js' );
	head.js( '/lib/js/highlight.js', function() {
		// Fire off syntax highlighting for potential code samples in the slides
		hljs.initHighlightingOnLoad();
	} );


	// presentation setting

	var presentation_id;
	var presentation_name;
	var query = {};
		

	// map the url to the presentation id
	var pathNameArr = window.location.pathname.split("/");
	
	if(pathNameArr.length > 1)
		presentation_id = pathNameArr[1];//id
		presentation_name = pathNameArr[2];//name

	document.title = presentation_name;//set title

	head.js( '/socket.io/socket.io.js', '/js/reveal.min.js' , function() {
		// Parse the query string into a key/value object
		

		location.search.replace( /[A-Z0-9]+?=(\w*)/gi, function(a) {
			query[ a.split( '=' ).shift() ] = a.split( '=' ).pop();
		} );

		// Fires when a slide with data-state=customevent is activated
		Reveal.addEventListener( 'customevent', function() {
			console.log( '"customevent" has fired' );
		} );

		// Fires each time a new slide is activated
		Reveal.addEventListener( 'slidechanged', function( event ) {
			// event.previousSlide, event.currentSlide, event.indexh, event.indexv
		} );


		// connect
		var socket = io.connect('/');	
		
		socket.on('connect', function () {
			console.log("client connected. Sending cur slide request");
			
	
			// on connect send presentation request
			socket.emit('request_presentation', {'id': presentation_id } );
		
			// init data
			socket.on('initdata', function(data) {
				console.log("Init data: "+data.id+"  presentation_id  "+presentation_id + JSON.stringify(data) );
				if(data.id == presentation_id)
				{
					//reveal config !!!

					Reveal.initialize({
						// Display controls in the bottom right corner
						controls: data.control,

						// Display a presentation progress bar
						progress: true,

						// If true; each slide will be pushed to the browser history
						history: true,

						// Loops the presentation, defaults to false
						loop: false,

						// Flags if mouse wheel navigation should be enabled
						mouseWheel: data.control,

						// Apply a 3D roll to links on hover
						rollingLinks: true,

						// UI style
						theme: Reveal.getQueryHash().theme, 

						// Transition style
						transition: query.transition || 'default', // default/cube/page/concave/linear(2d)

						dependencies: [
							// Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/
							{ src: '/lib/js/classList.js', condition: function() { return !document.body.classList; } },

							// Interpret Markdown in <section> elements
							{ src: '/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
							{ src: '/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },

							// Syntax highlight for <code> elements
							{ src: '/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },

							// Zoom in and out with Alt+click
							{ src: '/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },

							// Speaker notes
							{ src: '/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },

							// Remote control your reveal.js presentation using a touch device
							{ src: '/plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } },

							// MathJax
							{ src: '/plugin/math/math.js', async: true }
						]
					});

					// go to the respective slide
					Reveal.navigateTo(data.indexh, data.indexv);
					
				}
			});
			
			//remote !!!!!!!
			socket.on('updatedata', function(data) {
				console.log("Receive update data: " + JSON.stringify(data) );
				
				if(data.id == presentation_id)
				{
					// go to the respective slide
					Reveal.navigateTo(data.indexh, data.indexv);
				}
			});
			
		
		});
		
	} );
	
</script>
	
	
	</body>
</html>

